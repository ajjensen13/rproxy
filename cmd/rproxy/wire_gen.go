// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"github.com/ajjensen13/gke"
	"net"
	"net/http"
)

// Injectors from wire.go:

func newLogger(ctx context.Context) (gke.Logger, func(), error) {
	logClient, cleanup, err := gke.NewLogClient(ctx)
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := gke.NewLogger(logClient)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return logger, func() {
		cleanup2()
		cleanup()
	}, nil
}

func newListener(ctx context.Context, l gke.Logger) (net.Listener, func(), error) {
	config := provideConfig(l)
	storageClient, cleanup, err := gke.NewStorageClient(ctx)
	if err != nil {
		return nil, nil, err
	}
	bucketHandle := provideBucketHandle(l, config, storageClient)
	cache := provideAutocertCache(l, bucketHandle)
	v := provideDomains(l, config)
	listener := provideListener(l, cache, v)
	return listener, func() {
		cleanup()
	}, nil
}

func newServer(ctx context.Context, l gke.Logger) *http.Server {
	config := provideConfig(l)
	handler := provideHandler(l, config)
	logger := provideErrorLogger(l)
	server := provideServer(l, handler, logger)
	return server
}
